package org.bitseal.tests.crypt;

import junit.framework.TestCase;

import org.bitseal.core.AddressProcessor;
import org.bitseal.core.App;
import org.bitseal.crypt.AddressGenerator;
import org.bitseal.crypt.ECKeyPair;
import org.bitseal.crypt.KeyConverter;
import org.bitseal.data.Address;
import org.bitseal.database.AddressProvider;
import org.bitseal.database.DatabaseContentProvider;
import org.spongycastle.jce.interfaces.ECPrivateKey;

import android.os.SystemClock;
import android.util.Log;

/** 
 * Tests the method AddressGenerator.recreateAddressString(). 
**/
public class Test_RecreateAddressString extends TestCase
{
	private static final String TAG = "TEST_RECREATE_ADDRESS_STRING";
	
	protected void setUp() throws Exception
	{
		super.setUp();
		
		// Open the database
		DatabaseContentProvider.openDatabase();
		SystemClock.sleep(5000); // We have to allow some extra time for the database to be opened
	}

	protected void tearDown() throws Exception
	{
		super.tearDown();
	}
	
	public void testRecreateAddressString()
	{
		for (int i = 0; i < 10; i ++) // Run this 10 times
		{
			// ----------------- First test: Generate a new Bitmessage address, then check whether it is recreated correctly---------------
			AddressGenerator addGen = new AddressGenerator();
			Address address = addGen.generateAndSaveNewAddress();
			String addressString = address.getAddress();
			Log.i(TAG, "Generated address:        " + addressString);
			
			// Extract the address version and stream number from the address
			AddressProcessor addProc = new AddressProcessor();
			int[] addressNumbers = addProc.decodeAddressNumbers(addressString);
			int addressVersion = addressNumbers[0];
			int streamNumber = addressNumbers[1];
			
			// Re-generate the public keys of the address
			KeyConverter keyConv = new KeyConverter();
			ECPrivateKey privSigningKey = keyConv.decodePrivateKeyFromWIF(address.getPrivateSigningKey());
			ECPrivateKey privEncryptionKey = keyConv.decodePrivateKeyFromWIF(address.getPrivateEncryptionKey());
			ECKeyPair signingKeyPair = new ECKeyPair(privSigningKey.getD());
			ECKeyPair encryptionKeyPair = new ECKeyPair(privEncryptionKey.getD());
			byte[] publicSigningKey = signingKeyPair.getPubKey();
			byte[] publicEncryptionKey = encryptionKeyPair.getPubKey();
			
			// Recreate the address and check whether it matches
			String recreatedAddressString = addGen.recreateAddressString(addressVersion, streamNumber, publicSigningKey, publicEncryptionKey);
			Log.i(TAG, "Original address string:  " + addressString);
			Log.i(TAG, "Recreated address string: " + recreatedAddressString);
			assertTrue(recreatedAddressString.equals(addressString));
			
			// Cleaning up - delete the address we created from the database
			AddressProvider addProv = AddressProvider.get(App.getContext());
			addProv.deleteAddress(address);
			//-----------------------------------------------------------------------------------------------------------------------------
		}
		
		// --------- Second test: Start with an address generated by PyBitmessage and test whether it is recreated correctly-----------
		// Starting data
		String addressString = "BM-2cWH3y8Kyzyy7j4fYkwj6qDWzqZRUqqb2a";
		String privateSigningKey = "5JRkx8gHLLiFEt3CBnbLPigZHjJBPBGLMWafVA25gSrACDUeiNW";
		String privateEncryptionKey = "5JqZ4Tkj51jZhdxATuH7JCTLquYt4vdJiSzuJnG4UUSs8CvTB97";	
		Log.i(TAG, "PyBitmessage address:        " + addressString);
		
		// Extract the address version and stream number from the address
		AddressProcessor addProc = new AddressProcessor();
		int[] addressNumbers = addProc.decodeAddressNumbers(addressString);
		int addressVersion = addressNumbers[0];
		int streamNumber = addressNumbers[1];
		
		// Re-generate the public keys of the address
		KeyConverter keyConv = new KeyConverter();
		ECPrivateKey privSigningKey = keyConv.decodePrivateKeyFromWIF(privateSigningKey);
		ECPrivateKey privEncryptionKey = keyConv.decodePrivateKeyFromWIF(privateEncryptionKey);
		ECKeyPair signingKeyPair = new ECKeyPair(privSigningKey.getD());
		ECKeyPair encryptionKeyPair = new ECKeyPair(privEncryptionKey.getD());
		byte[] publicSigningKey = signingKeyPair.getPubKey();
		byte[] publicEncryptionKey = encryptionKeyPair.getPubKey();
		
		// Recreate the address and check whether it matches
		AddressGenerator addGen = new AddressGenerator();
		String recreatedAddressString = addGen.recreateAddressString(addressVersion, streamNumber, publicSigningKey, publicEncryptionKey);
		Log.i(TAG, "Original address string:  " + addressString);
		Log.i(TAG, "Recreated address string: " + recreatedAddressString);
		assertTrue(recreatedAddressString.equals(addressString));
		//-----------------------------------------------------------------------------------------------------------------------------
	}
}